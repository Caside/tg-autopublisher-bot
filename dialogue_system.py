"""
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞–º–∏ –º–µ–∂–¥—É –º—ã—Å–ª–∏—Ç–µ–ª—è–º–∏.
–°–æ–∑–¥–∞–µ—Ç –∂–∏–≤—ã–µ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –¥–∏—Å–∫—É—Å—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º.
"""

import json
import random
import logging
from datetime import datetime, timedelta
from collections import deque
from typing import List, Dict, Optional, Tuple
from philosophers import (
    PHILOSOPHERS, 
    get_philosopher_names, 
    get_random_philosopher_pair, 
    get_philosopher_prompt
)

logger = logging.getLogger(__name__)

class DialogueHistory:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
    
    def __init__(self, max_history=10):
        self.max_history = max_history
        self.dialogues = deque(maxlen=max_history)
        self.themes_used = deque(maxlen=20)
    
    def add_dialogue(self, dialogue_data: Dict):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–∏–∞–ª–æ–≥ –≤ –∏—Å—Ç–æ—Ä–∏—é."""
        dialogue_data['timestamp'] = datetime.now().isoformat()
        self.dialogues.append(dialogue_data)
        self.themes_used.append(dialogue_data.get('theme', ''))
    
    def get_recent_context(self, theme: str, philosopher: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º—ã—Å–ª–∏—Ç–µ–ª—è –ø–æ —Ç–µ–º–µ."""
        relevant_dialogues = []
        
        # –ò—â–µ–º –¥–∏–∞–ª–æ–≥–∏ —Å –ø–æ—Ö–æ–∂–∏–º–∏ —Ç–µ–º–∞–º–∏ –∏–ª–∏ —Å —É—á–∞—Å—Ç–∏–µ–º —ç—Ç–æ–≥–æ –º—ã—Å–ª–∏—Ç–µ–ª—è
        for dialogue in list(self.dialogues)[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–∏–∞–ª–æ–≥–æ–≤
            if (theme.lower() in dialogue.get('theme', '').lower() or 
                philosopher in dialogue.get('participants', [])):
                relevant_dialogues.append(dialogue)
        
        if not relevant_dialogues:
            return ""
        
        context_parts = []
        for dialogue in relevant_dialogues[-2:]:  # –ú–∞–∫—Å–∏–º—É–º 2 –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∏–∞–ª–æ–≥–∞
            participants = " –∏ ".join([PHILOSOPHERS[p]['name'] for p in dialogue.get('participants', [])])
            context_parts.append(f"–ù–µ–¥–∞–≤–Ω–æ {participants} –æ–±—Å—É–∂–¥–∞–ª–∏ '{dialogue.get('theme', '')}': {dialogue.get('summary', '')[:100]}...")
        
        return "\n".join(context_parts)
    
    def get_theme_freshness(self, theme: str) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç "—Å–≤–µ–∂–µ—Å—Ç—å" —Ç–µ–º—ã (0-1, –≥–¥–µ 1 = –æ—á–µ–Ω—å —Å–≤–µ–∂–∞—è)."""
        recent_themes = list(self.themes_used)[-10:]
        if theme in recent_themes:
            # –ß–µ–º –Ω–µ–¥–∞–≤–Ω–µ–µ –±—ã–ª–∞ —Ç–µ–º–∞, —Ç–µ–º –º–µ–Ω—å—à–µ —Å–≤–µ–∂–µ—Å—Ç—å
            last_index = len(recent_themes) - 1 - recent_themes[::-1].index(theme)
            return last_index / len(recent_themes)
        return 1.0  # –ù–æ–≤–∞—è —Ç–µ–º–∞

class DialogueSystem:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞–º–∏."""
    
    def __init__(self, deepseek_client):
        self.deepseek_client = deepseek_client
        self.history = DialogueHistory()
        self.dialogue_formats = [
            "—Å–ø–æ—Ä",
            "–¥—Ä—É–∂–µ—Å–∫–∞—è –±–µ—Å–µ–¥–∞", 
            "–¥–µ–±–∞—Ç—ã",
            "—Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∞—è –¥–∏—Å–∫—É—Å—Å–∏—è",
            "—Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ –º–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–π",
            "–ø–æ–∏—Å–∫ –∏—Å—Ç–∏–Ω—ã",
            "–æ–±–º–µ–Ω –º–Ω–µ–Ω–∏—è–º–∏"
        ]
    
    def select_theme_and_philosophers(self, theme: str = None) -> Tuple[str, List[str]]:
        """–í—ã–±–∏—Ä–∞–µ—Ç —Ç–µ–º—É –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–∏–∞–ª–æ–≥–∞."""
        from themes import POST_THEMES
        
        if not theme:
            # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–º—É —Å —É—á–µ—Ç–æ–º —Å–≤–µ–∂–µ—Å—Ç–∏
            themes_with_freshness = [
                (t, self.history.get_theme_freshness(t)) for t in POST_THEMES
            ]
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–≤–µ–∂–µ—Å—Ç–∏ –∏ –≤—ã–±–∏—Ä–∞–µ–º –∏–∑ —Ç–æ–ø-50%
            themes_with_freshness.sort(key=lambda x: x[1], reverse=True)
            top_themes = themes_with_freshness[:len(themes_with_freshness)//2]
            theme = random.choice(top_themes)[0]
        
        # –í—ã–±–∏—Ä–∞–µ–º –¥–≤—É—Ö –º—ã—Å–ª–∏—Ç–µ–ª–µ–π
        philosophers = get_random_philosopher_pair()
        
        return theme, philosophers
    
    async def generate_dialogue_opening(self, theme: str, philosophers: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–≤–æ–¥–Ω—É—é —á–∞—Å—Ç—å –¥–∏–∞–ª–æ–≥–∞."""
        philosopher_names = [PHILOSOPHERS[p]['name'] for p in philosophers]
        dialogue_format = random.choice(self.dialogue_formats)
        
        opening_prompt = f"""–°–æ–∑–¥–∞–π –æ—á–µ–Ω—å –∫—Ä–∞—Ç–∫–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –º–∞–∫—Å–∏–º—É–º 50 —Å–ª–æ–≤) –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –º–µ–∂–¥—É {philosopher_names[0]} –∏ {philosopher_names[1]} –Ω–∞ —Ç–µ–º—É "{theme}".

–§–æ—Ä–º–∞—Ç: {dialogue_format}

–í–≤–µ–¥–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º –∏ –∏–Ω—Ç—Ä–∏–≥—É—é—â–∏–º, –∑–∞–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π."""
        
        try:
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {self.deepseek_client.api_key}"
            }
            
            payload = {
                "model": "deepseek-chat",
                "messages": [{"role": "user", "content": opening_prompt}],
                "max_tokens": 80,
                "temperature": 0.8
            }
            
            import requests
            response = requests.post(
                self.deepseek_client.api_url,
                headers=headers,
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                return result["choices"][0]["message"]["content"].strip()
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–µ–Ω–∏—è: {response.status_code}")
                return f"üé≠ {philosopher_names[0]} –∏ {philosopher_names[1]} –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ç–µ–º—ã: {theme}"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–µ–Ω–∏—è: {str(e)}")
            return f"üé≠ {philosopher_names[0]} –∏ {philosopher_names[1]} –Ω–∞—á–∏–Ω–∞—é—Ç –¥–∏–∞–ª–æ–≥ –æ '{theme}'"
    
    async def generate_philosopher_response(self, philosopher: str, theme: str, context: str = "") -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ–¥–Ω–æ–≥–æ –º—ã—Å–ª–∏—Ç–µ–ª—è."""
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        historical_context = self.history.get_recent_context(theme, philosopher)
        full_context = f"{historical_context}\n\n{context}".strip()
        
        prompt = get_philosopher_prompt(philosopher, theme, full_context if full_context else None)
        
        try:
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {self.deepseek_client.api_key}"
            }
            
            payload = {
                "model": "deepseek-chat",
                "messages": [{"role": "user", "content": prompt}],
                "max_tokens": 120,
                "temperature": 0.9,
                "top_p": 0.95
            }
            
            import requests
            response = requests.post(
                self.deepseek_client.api_url,
                headers=headers,
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                return result["choices"][0]["message"]["content"].strip()
            else:
                logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ {philosopher}: {response.status_code}")
                return f"*{PHILOSOPHERS[philosopher]['name']} –∑–∞–¥—É–º–∞–ª—Å—è...*"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ {philosopher}: {str(e)}")
            return f"*{PHILOSOPHERS[philosopher]['name']} —Ä–∞–∑–º—ã—à–ª—è–µ—Ç –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...*"
    
    async def create_full_dialogue(self, theme: str = None) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –¥–∏–∞–ª–æ–≥ –º–µ–∂–¥—É –¥–≤—É–º—è –º—ã—Å–ª–∏—Ç–µ–ª—è–º–∏."""
        try:
            # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–º—É –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            theme, philosophers = self.select_theme_and_philosophers(theme)
            
            logger.info(f"–°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –º–µ–∂–¥—É {philosophers} –Ω–∞ —Ç–µ–º—É: {theme}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–≤–µ–¥–µ–Ω–∏–µ
            opening = await self.generate_dialogue_opening(theme, philosophers)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —Ä–µ–ø–ª–∏–∫—É
            first_response = await self.generate_philosopher_response(philosophers[0], theme)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤—Ç–æ—Ä–æ–≥–æ –º—ã—Å–ª–∏—Ç–µ–ª—è
            context_for_second = f"{PHILOSOPHERS[philosophers[0]]['name']}: {first_response}"
            second_response = await self.generate_philosopher_response(philosophers[1], theme, context_for_second)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ (—Ç–æ–ª—å–∫–æ 2 —Ä–µ–ø–ª–∏–∫–∏ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏)
            dialogue = {
                'theme': theme,
                'participants': philosophers,
                'opening': opening,
                'exchanges': [
                    {'speaker': philosophers[0], 'text': first_response},
                    {'speaker': philosophers[1], 'text': second_response}
                ],
                'summary': f"{first_response[:50]}... ‚Üí {second_response[:50]}..."
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.history.add_dialogue(dialogue)
            
            return dialogue
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞: {str(e)}")
            return None
    
    def format_dialogue_for_telegram(self, dialogue: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram."""
        if not dialogue:
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞"
        
        formatted = f"<b>üí≠ {dialogue['opening']}</b>\n\n"
        
        for exchange in dialogue['exchanges']:
            speaker_name = PHILOSOPHERS[exchange['speaker']]['name']
            speaker_emoji = self.get_speaker_emoji(exchange['speaker'])
            
            formatted += f"{speaker_emoji} <b>{speaker_name}:</b>\n"
            formatted += f"<i>{exchange['text']}</i>\n\n"
        
        formatted += f"#—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è #{dialogue['theme'].replace(' ', '_')}"
        
        return formatted
    
    def get_speaker_emoji(self, philosopher: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –º—ã—Å–ª–∏—Ç–µ–ª—è."""
        emoji_map = {
            'stoic': 'üèõÔ∏è',
            'existentialist': 'üåä', 
            'zen_master': 'üçÉ',
            'cynic': '‚ö°',
            'mystic': '‚ú®'
        }
        return emoji_map.get(philosopher, 'üß†')
    
    def get_dialogue_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∏–∞–ª–æ–≥–æ–≤."""
        total_dialogues = len(self.history.dialogues)
        if total_dialogues == 0:
            return {"total": 0, "recent_themes": [], "active_philosophers": []}
        
        recent_themes = list(self.history.themes_used)[-5:]
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º—ã—Å–ª–∏—Ç–µ–ª–µ–π
        philosopher_counts = {}
        for dialogue in self.history.dialogues:
            for participant in dialogue.get('participants', []):
                philosopher_counts[participant] = philosopher_counts.get(participant, 0) + 1
        
        return {
            "total": total_dialogues,
            "recent_themes": recent_themes,
            "active_philosophers": philosopher_counts,
            "available_philosophers": get_philosopher_names()
        } 